package base;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import io.github.bonigarcia.wdm.WebDriverManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BasePage {
    protected static WebDriver driver;
    protected static final Logger logger = LoggerFactory.getLogger(BasePage.class);

    // Initialize WebDriver
    public void initializeDriver() {
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless"); // Run in headless mode
        options.addArguments("--window-size=1920,1080");
        driver = new ChromeDriver(options);
        driver.manage().window().maximize();
        logger.info("WebDriver initialized.");
    }

    // Close WebDriver
    public void closeBrowser() {
        if (driver != null) {
            driver.quit();
            logger.info("Browser closed.");
        }
    }

    public WebDriver getDriver() {
        return driver;
    }
}

2Pages
package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import base.BasePage;

public class RegistrationPage extends BasePage {
    // Locators for Registration
    private final By firstNameField = By.id("customer.firstName");
    private final By lastNameField = By.id("customer.lastName");
    private final By usernameField = By.id("customer.username");
    private final By passwordField = By.id("customer.password");
    private final By confirmPasswordField = By.id("repeatedPassword");
    private final By registerButton = By.cssSelector("input[value='Register']");
    private final By registrationSuccessMessage = By.className("title");

    public RegistrationPage(WebDriver driver) {
        this.driver = driver;
    }

    // Method to register a new user
    public void registerUser(String firstName, String lastName, String username, String password) {
        try {
            driver.findElement(firstNameField).sendKeys(firstName);
            driver.findElement(lastNameField).sendKeys(lastName);
            driver.findElement(usernameField).sendKeys(username);
            driver.findElement(passwordField).sendKeys(password);
            driver.findElement(confirmPasswordField).sendKeys(password);
            driver.findElement(registerButton).click();
            logger.info("User registration details entered.");
        } catch (Exception e) {
            logger.error("Error during user registration: " + e.getMessage());
            throw e;
        }
    }

    // Method to verify registration success
    public boolean isRegistrationSuccess(String username) {
        try {
            return driver.findElement(registrationSuccessMessage).getText().contains("Welcome " + username);
        } catch (Exception e) {
            logger.error("Registration success message not found: " + e.getMessage());
            return false;
        }
    }
}

3.Login
package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import base.BasePage;

public class LoginPage extends BasePage {
    // Locators for Login
    private final By usernameField = By.name("username");
    private final By passwordField = By.name("password");
    private final By loginButton = By.cssSelector("input[value='Log In']");
    private final By welcomeMessage = By.className("smallText");

    public LoginPage(WebDriver driver) {
        this.driver = driver;
    }

    // Method to log in a user
    public void login(String username, String password) {
        try {
            driver.findElement(usernameField).sendKeys(username);
            driver.findElement(passwordField).sendKeys(password);
            driver.findElement(loginButton).click();
            logger.info("User logged in with username: " + username);
        } catch (Exception e) {
            logger.error("Login failed: " + e.getMessage());
            throw e;
        }
    }

    // Method to verify login success
    public boolean isLoginSuccess(String firstName, String lastName) {
        try {
            return driver.findElement(welcomeMessage).getText().contains(firstName + " " + lastName);
        } catch (Exception e) {
            logger.error("Login success message not found: " + e.getMessage());
            return false;
        }
    }
}

4. para test
package tests;

import base.BasePage;
import org.testng.Assert;
import org.testng.annotations.*;
import pages.LoginPage;
import pages.RegistrationPage;
import utils.ExcelUtil;
import utils.Listeners;

@Listeners(Listeners.class)
public class ParaBankTests extends BasePage {
    RegistrationPage registrationPage;
    LoginPage loginPage;

    @BeforeSuite
    public void setUpSuite() {
        initializeDriver();
    }

    @BeforeMethod
    public void setUp() {
        driver.get("https://parabank.parasoft.com/parabank/index.htm");
        registrationPage = new RegistrationPage(driver);
        loginPage = new LoginPage(driver);
    }

    @Test(priority = 1)
    public void testUserRegistration() {
        String[] userData = ExcelUtil.readExcelData("TestData.xlsx", "UserDetails");
        String firstName = userData[0];
        String lastName = userData[1];
        String username = userData[2];
        String password = userData[3];

        registrationPage.registerUser(firstName, lastName, username, password);
        Assert.assertTrue(registrationPage.isRegistrationSuccess(username), "User Registration Failed!");
    }

    @Test(priority = 2, dependsOnMethods = {"testUserRegistration"})
    public void testUserLogin() {
        String[] userData = ExcelUtil.readExcelData("TestData.xlsx", "UserDetails");
        String firstName = userData[0];
        String lastName = userData[1];
        String username = userData[2];
        String password = userData[3];

        loginPage.login(username, password);
        Assert.assertTrue(loginPage.isLoginSuccess(firstName, lastName), "Login Failed!");
    }

    @AfterSuite
    public void tearDownSuite() {
        closeBrowser();
    }
}

utils
package utils;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.FileInputStream;
import java.io.IOException;

public class ExcelUtil {
    public static String[] readData(String filePath, String sheetName, int rowNumber) {
        String[] data = null;
        try (FileInputStream file = new FileInputStream(filePath)) {
            Workbook workbook = new XSSFWorkbook(file);
            Sheet sheet = workbook.getSheet(sheetName);
            Row row = sheet.getRow(rowNumber);
            data = new String[row.getLastCellNum()];
            for (int i = 0; i < row.getLastCellNum(); i++) {
                data[i] = row.getCell(i).getStringCellValue();
            }
            workbook.close();
        } catch (IOException e) {
            LoggerUtil.log("Error reading Excel file: " + e.getMessage());
        }
        return data;
    }
}

