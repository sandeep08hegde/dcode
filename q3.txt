import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.testng.Assert;

public class SeleniumAssignment {
    public static void main(String[] args) {
        // Set up ChromeDriver path (replace with your path to chromedriver)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        // Initialize ChromeDriver
        WebDriver driver = new ChromeDriver();

        try {
            // 1. Open the Chrome browser
            // 2. Maximize the browser window
            driver.manage().window().maximize();

            // 3. Navigate to https://phptravels.com/demo
            driver.get("https://phptravels.com/demo");

            // 4. Retrieve the title of the page
            String pageTitle = driver.getTitle();
            System.out.println("Page Title: " + pageTitle);

            // 5. Verify if title contains expected string
            String expectedTitle = "Book Your Free Demo Now - Phptravels";
            try {
                Assert.assertEquals(pageTitle, expectedTitle);
                System.out.println("PASS: Title matches.");
            } catch (AssertionError e) {
                System.out.println("FAIL: Title does not match.");
            }

            // 6. Click on the "Login" option
            WebElement loginLink = driver.findElement(By.linkText("Login"));
            loginLink.click();

            // Switch to the new tab opened
            for (String winHandle : driver.getWindowHandles()) {
                driver.switchTo().window(winHandle);
            }

            // Retrieve the title of the new page
            String loginPageTitle = driver.getTitle();
            System.out.println("Login Page Title: " + loginPageTitle);

            // 7. Assert whether the titles from Step 4 and Step 6 are the same
            if (pageTitle.equals(loginPageTitle)) {
                System.out.println("PASS: Titles are the same.");
            } else {
                System.out.println("FAIL: Titles are not the same.");
            }

            // 8. Navigate back to the previous tab
            driver.close(); // Close the current tab (Login)
            driver.switchTo().window(driver.getWindowHandles().iterator().next());

            // Print the URL of the current page
            System.out.println("Current URL: " + driver.getCurrentUrl());

            // 10. Click on the "Pricing" option
            WebElement pricingLink = driver.findElement(By.linkText("Pricing"));
            pricingLink.click();

            // Verify "Plans and Prices" is displayed
            try {
                WebElement plansAndPrices = driver.findElement(By.xpath("//*[contains(text(), 'Plans and Prices')]"));
                if (plansAndPrices.isDisplayed()) {
                    System.out.println("PASS: 'Plans and Prices' is displayed.");
                }
            } catch (NoSuchElementException e) {
                System.out.println("FAIL: 'Plans and Prices' is not displayed.");
            }

            // 11. Navigate backwards
            driver.navigate().back();

            // 12. Reload/Refresh the page
            driver.navigate().refresh();

        } finally {
            // 13. Close the browser
            driver.quit();
        }
    }
}


q4.
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class FramesAssignment {
    public static void main(String[] args) {
        // Set up ChromeDriver path (replace with your path to chromedriver)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        // Initialize ChromeDriver
        WebDriver driver = new ChromeDriver();

        try {
            // 1. Launch https://the-internet.herokuapp.com/
            driver.get("https://the-internet.herokuapp.com/");

            // 2. Click on "Frames"
            WebElement framesLink = driver.findElement(By.linkText("Frames"));
            framesLink.click();

            // 3. Click on "Nested Frames"
            WebElement nestedFramesLink = driver.findElement(By.linkText("Nested Frames"));
            nestedFramesLink.click();

            // 4. Switch to the main frameset containing nested frames
            driver.switchTo().frame("frame-top");

            // 5. Switch to the LEFT frame
            driver.switchTo().frame("frame-left");

            // Retrieve the content inside the LEFT frame
            WebElement leftFrameContent = driver.findElement(By.tagName("body"));
            String leftFrameText = leftFrameContent.getText().trim(); // Trim any whitespace around the text

            // Ensure the title/content of the LEFT frame is "LEFT"
            if (leftFrameText.equals("LEFT")) {
                System.out.println("PASS: The title/content of the LEFT frame is 'LEFT'.");
            } else {
                System.out.println("FAIL: The title/content of the LEFT frame is not 'LEFT'. Found: " + leftFrameText);
            }

        } finally {
            // Close the browser
            driver.quit();
        }
    }
}


q6
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.JavascriptExecutor;

public class DragAndDropUsingJS {
    public static void main(String[] args) {
        // Set up ChromeDriver path (replace with your path to chromedriver)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        // Initialize ChromeDriver
        WebDriver driver = new ChromeDriver();

        try {
            // 1. Launch https://the-internet.herokuapp.com/
            driver.get("https://the-internet.herokuapp.com/");

            // 2. Click on 'Drag and Drop'
            WebElement dragAndDropLink = driver.findElement(By.linkText("Drag and Drop"));
            dragAndDropLink.click();

            // 3. Perform Drag and Drop using JavaScriptExecutor
            WebElement columnA = driver.findElement(By.id("column-a"));
            WebElement columnB = driver.findElement(By.id("column-b"));

            // Using JavaScript to perform drag and drop
            JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;
            String dragAndDropScript = "function createEvent(typeOfEvent) {" +
                    "var event = document.createEvent(\"CustomEvent\");" +
                    "event.initCustomEvent(typeOfEvent, true, true, null);" +
                    "event.dataTransfer = {" +
                    "data: {}," +
                    "setData: function (key, value) {" +
                    "this.data[key] = value;" +
                    "}," +
                    "getData: function (key) {" +
                    "return this.data[key];" +
                    "}" +
                    "};" +
                    "return event;" +
                    "}" +
                    "" +
                    "function dispatchEvent(element, event, transferData) {" +
                    "if (transferData !== undefined) {" +
                    "event.dataTransfer = transferData;" +
                    "}" +
                    "if (element.dispatchEvent) {" +
                    "element.dispatchEvent(event);" +
                    "} else if (element.fireEvent) {" +
                    "element.fireEvent(\"on\" + event.type, event);" +
                    "}" +
                    "}" +
                    "" +
                    "function simulateHTML5DragAndDrop(element, destination) {" +
                    "var dragStartEvent = createEvent('dragstart');" +
                    "dispatchEvent(element, dragStartEvent);" +
                    "var dropEvent = createEvent('drop');" +
                    "dispatchEvent(destination, dropEvent, dragStartEvent.dataTransfer);" +
                    "var dragEndEvent = createEvent('dragend');" +
                    "dispatchEvent(element, dragEndEvent, dragStartEvent.dataTransfer);" +
                    "}" +
                    "" +
                    "simulateHTML5DragAndDrop(arguments[0], arguments[1]);";

            // Execute the JavaScript to perform the drag and drop
            jsExecutor.executeScript(dragAndDropScript, columnA, columnB);

            // Pause for a few seconds to observe the result
            Thread.sleep(2000);  // Wait for 2 seconds (optional)

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}



q7
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

public class DropdownSelection {
    public static void main(String[] args) {
        // Set up ChromeDriver path (replace with your path to chromedriver)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        // Initialize ChromeDriver
        WebDriver driver = new ChromeDriver();

        try {
            // 1. Launch https://the-internet.herokuapp.com/dropdown
            driver.get("https://the-internet.herokuapp.com/dropdown");

            // 2. Locate the dropdown element
            WebElement dropdownElement = driver.findElement(By.id("dropdown"));

            // 3. Use the Select class to interact with the dropdown
            Select dropdown = new Select(dropdownElement);

            // 4. Select "Option 2" from the dropdown
            dropdown.selectByVisibleText("Option 2");

            // Pause for a few seconds to observe the result (optional)
            Thread.sleep(2000);  // Wait for 2 seconds

            // Verify the selected option
            WebElement selectedOption = dropdown.getFirstSelectedOption();
            if (selectedOption.getText().equals("Option 2")) {
                System.out.println("PASS: Option 2 is selected.");
            } else {
                System.out.println("FAIL: Option 2 is not selected. Found: " + selectedOption.getText());
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}


import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class ElementLocatorAssignment {
    public static void main(String[] args) {
        // Set up ChromeDriver path (replace with your path to chromedriver)
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        // Initialize ChromeDriver
        WebDriver driver = new ChromeDriver();

        try {
            // 1. Open the website
            driver.get("https://www.phptravels.net/hotels");
            driver.manage().window().maximize();

            // 2. Locate the Check-in Calendar Icon using XPath
            WebElement checkInCalendarIconXPath = driver.findElement(By.xpath("//label[text()='Check in']/following-sibling::div//i[contains(@class, 'calendar')]"));
            System.out.println("Check-in Calendar Icon (XPath) displayed: " + checkInCalendarIconXPath.isDisplayed());

            // 3. Locate the Check-out Calendar Icon using XPath
            WebElement checkOutCalendarIconXPath = driver.findElement(By.xpath("//label[text()='Check out']/following-sibling::div//i[contains(@class, 'calendar')]"));
            System.out.println("Check-out Calendar Icon (XPath) displayed: " + checkOutCalendarIconXPath.isDisplayed());

            // 4. Locate the "+" Icon for Rooms using XPath
            WebElement plusIconForRoomsXPath = driver.findElement(By.xpath("//label[text()='Rooms']/following-sibling::div//button[contains(@class, 'roomAdd')]"));
            System.out.println("+ Icon for Rooms (XPath) displayed: " + plusIconForRoomsXPath.isDisplayed());

            // 5. Locate the "-" Icon for Rooms using XPath
            WebElement minusIconForRoomsXPath = driver.findElement(By.xpath("//label[text()='Rooms']/following-sibling::div//button[contains(@class, 'roomRemove')]"));
            System.out.println("- Icon for Rooms (XPath) displayed: " + minusIconForRoomsXPath.isDisplayed());

            // 6. Locate the "1" Input Tab for Rooms using XPath
            WebElement inputTabForRoomsXPath = driver.findElement(By.xpath("//label[text()='Rooms']/following-sibling::div//input[@type='number']"));
            System.out.println("Input Tab for Rooms (XPath) displayed: " + inputTabForRoomsXPath.isDisplayed());

            // 7. Locate elements using CSS Selectors for confirmation

            // Check-in Calendar Icon using CSS Selector
            WebElement checkInCalendarIconCSS = driver.findElement(By.cssSelector("label[for='checkin'] + div i.calendar"));
            System.out.println("Check-in Calendar Icon (CSS) displayed: " + checkInCalendarIconCSS.isDisplayed());

            // Check-out Calendar Icon using CSS Selector
            WebElement checkOutCalendarIconCSS = driver.findElement(By.cssSelector("label[for='checkout'] + div i.calendar"));
            System.out.println("Check-out Calendar Icon (CSS) displayed: " + checkOutCalendarIconCSS.isDisplayed());

            // "+" Icon for Rooms using CSS Selector
            WebElement plusIconForRoomsCSS = driver.findElement(By.cssSelector("label[for='rooms'] + div button.roomAdd"));
            System.out.println("+ Icon for Rooms (CSS) displayed: " + plusIconForRoomsCSS.isDisplayed());

            // "-" Icon for Rooms using CSS Selector
            WebElement minusIconForRoomsCSS = driver.findElement(By.cssSelector("label[for='rooms'] + div button.roomRemove"));
            System.out.println("- Icon for Rooms (CSS) displayed: " + minusIconForRoomsCSS.isDisplayed());

            // "1" Input Tab for Rooms using CSS Selector
            WebElement inputTabForRoomsCSS = driver.findElement(By.cssSelector("label[for='rooms'] + div input[type='number']"));
            System.out.println("Input Tab for Rooms (CSS) displayed: " + inputTabForRoomsCSS.isDisplayed());

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Close the browser
            driver.quit();
        }
    }
}


